"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const benchmark_1 = __importDefault(require("benchmark"));
const graphql_1 = require("graphql");
const __1 = require("../");
const printResult = (stats, name, schema) => {
    console.log({
        name,
        mean: `${1.0 / stats.mean} ops / sec`,
        variance: stats.variance,
        rme: `${stats.rme}%`,
        lines: schema.split('\n').length,
    });
    console.log(`Completed test suite: ${name}`);
};
const runSplitTest = (name, schema) => {
    const stats = [];
    const suite = new benchmark_1.default.Suite();
    const parser = __1.onlineParser();
    let state = parser.startState();
    schema.split('\n').forEach((line, index) => {
        let prevState;
        let completeState;
        suite.add({
            maxTime: 0.1,
            onStart: () => {
                prevState = Object.assign({}, state);
            },
            fn: () => {
                const stream = new __1.CharacterStream(line);
                while (!stream.eol()) {
                    parser.token(stream, state);
                    if (state.kind === 'Invalid') {
                        console.log(state.kind, line, index);
                        throw new Error('Invalid');
                    }
                }
                completeState = state;
                state = Object.assign({}, prevState);
            },
            onError: console.log,
            onComplete: (e) => {
                state = completeState;
                stats.push(e.target.stats);
            },
        });
    });
    console.log(`Started test suite: ${name}`);
    suite.run();
    const results = stats.reduce((result, stat) => {
        result.mean += stat.mean / stats.length;
        result.rme += stat.rme / stats.length;
        result.variance += stat.variance / stats.length;
        return result;
    }, { mean: 0, variance: 0, rme: 0 });
    printResult(results, name, schema);
};
const runWholeTest = (name, schema) => {
    const suite = new benchmark_1.default.Suite('', {
        onComplete: (e) => printResult(e.target.stats, name, schema),
    });
    const parser = __1.onlineParser();
    const state = parser.startState();
    suite.add(() => {
        const stream = new __1.CharacterStream(schema);
        while (!stream.eol()) {
            parser.token(stream, state);
            if (state.kind === 'Invalid') {
                console.log(state.kind);
                throw new Error('Invalid');
            }
        }
    });
    console.log(`Started test suite: ${name}`);
    suite.run();
};
const runGraphqlParserTest = (name, schema) => {
    const suite = new benchmark_1.default.Suite('', {
        onComplete: (e) => printResult(e.target.stats, name, schema),
    });
    suite.add({
        fn() {
            try {
                graphql_1.parse(schema);
            }
            catch (err) {
                console.log(err);
                throw err;
            }
        },
    });
    console.log(`Started test suite: ${name}`);
    suite.run();
};
const kitchenSchema = fs_1.default.readFileSync(path_1.default.resolve(__dirname, './fixtures/kitchen-sink.graphql'), {
    encoding: 'utf8',
});
const githubSchema = fs_1.default.readFileSync(path_1.default.resolve(__dirname, './fixtures/github.graphql'), {
    encoding: 'utf8',
});
runWholeTest('kitchen-sink:whole', kitchenSchema);
runSplitTest('kitchen-sink:split', kitchenSchema);
runWholeTest('github:whole', githubSchema);
runGraphqlParserTest('kitchen-sink:graphqljs', kitchenSchema);
runGraphqlParserTest('github:graphqljs', githubSchema);
//# sourceMappingURL=index.js.map